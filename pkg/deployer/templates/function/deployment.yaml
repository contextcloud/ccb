apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Key }}
  namespace: {{ .Namespace }}
  labels: 
    release: {{ .Name }}
    version: {{ .Version | quote }}
spec:
{{- if $.Replicas }}
  replicas: {{ .Replicas }}
{{- end }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: {{ .Name }}
      version: {{ .Version | quote }}
  template:
    metadata:
      name: {{ .Key }}
      labels:
        release: {{ .Name }}
        version: {{ .Version | quote }}
        {{- with .Labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      containers:
      - name: {{ .Name }}
        image: {{ .Image }}
{{- if $.Secrets }}
        envFrom:
        {{- range $key, $value := .Secrets }}
        - secretRef:
            name: {{ $value }}
        {{- end }}
{{- end }}
{{- if $.Environment }}
        env:
        {{- range $key, $value := .Environment }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
{{- end }}
        ports:
        - name: http
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        - name: health
          containerPort: 8082
{{- if $.LivenessProbe.Enabled }}
        livenessProbe:
          httpGet:
            path: {{ $.LivenessProbe.Path }}
            port: {{ $.LivenessProbe.Port }}
            scheme: HTTP
          initialDelaySeconds: {{ $.LivenessProbe.InitialDelaySeconds }}
          timeoutSeconds: {{ $.LivenessProbe.TimeoutSeconds }}
          periodSeconds: {{ $.LivenessProbe.PeriodSeconds }}
{{- end }}
{{- if $.ReadinessProbe.Enabled }}
        readinessProbe:
          httpGet:
            path: {{ $.ReadinessProbe.Path }}
            port: {{ $.ReadinessProbe.Port }}
            scheme: HTTP
          initialDelaySeconds: {{ $.ReadinessProbe.InitialDelaySeconds }}
          timeoutSeconds: {{ $.ReadinessProbe.TimeoutSeconds }}
          periodSeconds: {{ $.ReadinessProbe.PeriodSeconds }}
{{- end }}
{{- if or $.Limits $.Requests }}
        resources:
{{- if $.Limits }}
          limits:
            {{- range $key, $value := .Limits }}
            {{ $key }}: {{ $value }}
            {{- end }}
{{- end }}
{{- if $.Requests }}
          requests:
            {{- range $key, $value := .Requests }}
            {{ $key }}: {{ $value }}
            {{- end }}
{{- end }}
{{- end }}
{{- if $.ReadOnlyRootFilesystem }}
        securityContext:
          readOnlyRootFilesystem: {{ $.ReadOnlyRootFilesystem }}
{{- end }}
        volumeMounts:
        - mountPath: /tmp
          name: temp
{{- if $.Secrets }}
      {{- range $key, $value := .Secrets }}
        - mountPath: /var/secrets
          name: {{ $value }}
          readOnly: true
      {{- end }}
{{- end }}
{{- if $.NodeSelector }}
      nodeSelector:
        {{- range $key, $value := .NodeSelector }}
        {{ $key }}: {{ $value }}
        {{- end }}
{{- end }}
      volumes:
      - emptyDir: {}
        name: temp
{{- if $.Secrets }}
    {{- range $key, $value := .Secrets }}
      - name: {{ $value }}
        projected:
          defaultMode: 420
          sources:
          - secret:
              name: {{ $value }}
    {{- end }}
{{- end }}