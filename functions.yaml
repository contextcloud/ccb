---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assets_1
  namespace: demo
  labels: 
    release: assets
    version: "0.1"
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: assets
      version: "0.1"
  template:
    metadata:
      name: assets_1
      labels:
        release: assets
        version: "0.1"
    spec:
      containers:
      - name: assets
        image: assets_1:latest
        envFrom:
        - secretRef:
            name: assets
        env:
        - name: EXAMPLE
          value: "eg"
        - name: demo
          value: "yes"
        ports:
        - name: http
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        - name: health
          containerPort: 8082
        livenessProbe:
          httpGet:
            path: /live
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        volumeMounts:
        - mountPath: /tmp
          name: temp
        - mountPath: /var/secrets
          name: assets
          readOnly: true
      volumes:
      - emptyDir: {}
        name: temp
      - name: assets
        projected:
          defaultMode: 420
          sources:
          - secret:
              name: assets
---
apiVersion: v1
kind: Service
metadata:
  name: assets_1
  namespace: demo
  labels: 
    release: assets
    version: "0.1"
spec:
  ports:
    - name: http
      port: 8080
    - name: metrics
      port: 8081
    - name: health
      port: 8082
  selector:
    release: assets
    version: "0.1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assets_2
  namespace: demo
  labels: 
    release: assets
    version: "0.2"
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: assets
      version: "0.2"
  template:
    metadata:
      name: assets_2
      labels:
        release: assets
        version: "0.2"
    spec:
      containers:
      - name: assets
        image: assets_2:latest
        envFrom:
        - secretRef:
            name: assets
        env:
        - name: EXAMPLE
          value: "eg"
        - name: demo
          value: "yes"
        ports:
        - name: http
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        - name: health
          containerPort: 8082
        livenessProbe:
          httpGet:
            path: /live
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        volumeMounts:
        - mountPath: /tmp
          name: temp
        - mountPath: /var/secrets
          name: assets
          readOnly: true
      volumes:
      - emptyDir: {}
        name: temp
      - name: assets
        projected:
          defaultMode: 420
          sources:
          - secret:
              name: assets
---
apiVersion: v1
kind: Service
metadata:
  name: assets_2
  namespace: demo
  labels: 
    release: assets
    version: "0.2"
spec:
  ports:
    - name: http
      port: 8080
    - name: metrics
      port: 8081
    - name: health
      port: 8082
  selector:
    release: assets
    version: "0.2"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: profile
  namespace: demo
  labels: 
    release: profile
    version: "0.1"
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: profile
      version: "0.1"
  template:
    metadata:
      name: profile
      labels:
        release: profile
        version: "0.1"
    spec:
      containers:
      - name: profile
        image: profile:latest
        envFrom:
        - secretRef:
            name: profile
        env:
        - name: EXAMPLE
          value: "eg"
        - name: demo
          value: "yes"
        ports:
        - name: http
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        - name: health
          containerPort: 8082
        livenessProbe:
          httpGet:
            path: /live
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
        volumeMounts:
        - mountPath: /tmp
          name: temp
        - mountPath: /var/secrets
          name: profile
          readOnly: true
      volumes:
      - emptyDir: {}
        name: temp
      - name: profile
        projected:
          defaultMode: 420
          sources:
          - secret:
              name: profile
---
apiVersion: v1
kind: Service
metadata:
  name: profile
  namespace: demo
  labels: 
    release: profile
    version: "0.1"
spec:
  ports:
    - name: http
      port: 8080
    - name: metrics
      port: 8081
    - name: health
      port: 8082
  selector:
    release: profile
    version: "0.1"
---
apiVersion: v1
kind: Secret
metadata:
  name: assets
data:
  demo: YWJj
---
apiVersion: v1
kind: Secret
metadata:
  name: profile
data:
  demo: YWJj
---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: routes--api
  namespace: demo
spec:
  routes:
    - conditions:
      - prefix: /api/assets
      services:
        - name: assets_1
          port: 8080
---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: routes--api2
  namespace: demo
spec:
  routes:
    - conditions:
      - prefix: /api/assets
      - header:
          name: version
      services:
        - name: assets_2
          port: 8080
    - conditions:
      - prefix: /api/profile
      - header:
          name: version
      services:
        - name: profile
          port: 8080